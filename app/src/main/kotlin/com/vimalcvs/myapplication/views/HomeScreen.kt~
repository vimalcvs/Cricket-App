package com.vimalcvs.myapplication.views

import android.widget.Toast
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import com.vimalcvs.myapplication.data.Match
import com.vimalcvs.myapplication.data.MatchXX
import com.vimalcvs.myapplication.data.ModelMain
import com.vimalcvs.myapplication.data.Offer
import com.vimalcvs.myapplication.utils.BottomNavigation
import com.vimalcvs.myapplication.utils.ErrorScreen
import com.vimalcvs.myapplication.utils.LoadingScreen
import com.vimalcvs.myapplication.viewmodel.PostViewModel
import com.vimalcvs.myapplication.viewmodel.UiState

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(navController: NavHostController) {
    val context = LocalContext.current
    val viewModel: PostViewModel = hiltViewModel()
    val uiState by viewModel.uiState.collectAsState()

    Scaffold(
        modifier = Modifier.fillMaxSize(),
        topBar = {
            TopAppBar(
                title = { Text(text = "Home") },
                navigationIcon = {
                    IconButton(onClick = {
                        Toast.makeText(context, "Coming Soon", Toast.LENGTH_SHORT).show()
                    }) {
                        Icon(imageVector = Icons.Default.Menu, contentDescription = "Menu")
                    }
                }
            )
        },
        bottomBar = { BottomNavigation(navController) }
    ) { innerPadding ->
        MainList(
            uiState = uiState,
            onRetryClick = { viewModel.getPosts() },
            navController = navController,
            innerPadding = innerPadding
        )
    }
}

@Composable
fun MainList(
    uiState: UiState,
    onRetryClick: () -> Unit,
    innerPadding: PaddingValues,
    navController: NavHostController
) {
    Surface(
        modifier = Modifier
            .fillMaxSize()
            .padding(innerPadding)
    ) {
        when (uiState) {
            is UiState.Loading -> LoadingScreen()
            is UiState.Error -> ErrorScreen(message = uiState.message, onRetryClick = onRetryClick)
            is UiState.SuccessPost -> {
                val college = uiState.posts
                MainSectionList(model = college, navController = navController)
            }
        }
    }
}

@Composable
fun MainSectionList(model: ModelMain, navController: NavHostController) {
    LazyColumn(
        modifier = Modifier.fillMaxSize()
    ) {
        item {
            FeaturedTournamentList(
                model.featured_tournament.tournament_list[0].match_list,
                navController
            )
        }
        item { CurrentOffersList(model = model.current_offers.offer_list, navController) }
        item { UserMatchesList(model = model.user_matches.match_list, navController) }
        item { UpcomingMatchesList(model = model.upcoming_matches.match_list, navController) }
    }
}

@Composable
fun UserMatchesList(model: List<MatchXX>, navController: NavHostController) {
    Text("Students", fontWeight = FontWeight.Bold, modifier = Modifier.padding(8.dp))
    LazyRow(
        modifier = Modifier
            .fillMaxWidth()
    ) {
        items(model) { items ->
            ItemList(
                model = items.match,
                navController = navController
            )
        }
    }
}


@Composable
fun CurrentOffersList(model: List<Offer>, navController: NavHostController) {
    Text("Students", fontWeight = FontWeight.Bold, modifier = Modifier.padding(8.dp))
    LazyRow(
        modifier = Modifier
            .fillMaxWidth()
    ) {
        items(model) { items ->
            PosterItemList(
                model = items,
                navController = navController
            )
        }
    }
}


@Composable
fun FeaturedTournamentList(model: List<Match>, navController: NavHostController) {
    Text("Teachers", fontWeight = FontWeight.Bold, modifier = Modifier.padding(8.dp))
    LazyRow(
        modifier = Modifier
            .fillMaxWidth()

    ) {
        items(model) { items ->
            ItemList(model = items, navController = navController)
        }
    }
}

@Composable
fun UpcomingMatchesList(model: List<Match>, navController: NavHostController) {
    Text("Exams", fontWeight = FontWeight.Bold, modifier = Modifier.padding(8.dp))
    LazyColumn(
        modifier = Modifier.height(LocalConfiguration.current.screenHeightDp.dp)
    ) {
        items(model) { items ->
            ItemList(model = items, navController = navController)
        }
    }
}

@Composable
fun ItemList(model: Match, navController: NavHostController) {
    val context = navController.context
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .heightIn(min = 150.dp)
            .padding(8.dp),
        elevation = CardDefaults.cardElevation(4.dp),
        onClick = {
            Toast.makeText(
                context,
                "Coming Soon",
                Toast.LENGTH_SHORT
            )
                .show()
        }
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = model.name, fontWeight = FontWeight.Bold)
            Text(text = model.name)
        }
    }
}


@Composable
fun PosterItemList(model: Offer, navController: NavHostController) {
    val context = navController.context
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .heightIn(min = 200.dp)
            .padding(8.dp),
        elevation = CardDefaults.cardElevation(4.dp),
        onClick = {
            Toast.makeText(
                context,
                "Coming Soon",
                Toast.LENGTH_SHORT
            )
                .show()
        }
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = model.type, fontWeight = FontWeight.Bold)
        }
    }
}